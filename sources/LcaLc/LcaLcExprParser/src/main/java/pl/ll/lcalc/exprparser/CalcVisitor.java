package pl.ll.lcalc.exprparser;


import org.antlr.v4.runtime.tree.ParseTree;
import pl.ll.datacontainers.Values;
import pl.ll.lcalc.exprparser.autogenerated.ExprBaseVisitor;
import pl.ll.lcalc.exprparser.autogenerated.ExprParser;
import pl.ll.lcalcmath.ExprAble;

/**
 *   
 * @author lucjan
 *  
 */

public class CalcVisitor extends ExprBaseVisitor<Values> {    
    
    protected ExprAble exprAble;
    private Double outcome;
    
    public CalcVisitor(ExprAble exprAble) {
        this.exprAble = exprAble;
    }

    @Override
    public Values visit(ParseTree tree) {        
        return super.visit(tree);
    }

    @Override
    public Values visitCalcexpt(ExprParser.CalcexptContext ctx) {
        Values v = this.visit(ctx.expr(0));
        outcome = v.asDouble();
        return super.visitCalcexpt(ctx); 
    }    
    
    @Override
    public Values visitPlusExpr(ExprParser.PlusExprContext ctx) {        
        Values v1 = this.visit(ctx.expr(0));
        Values v2 = this.visit(ctx.expr(1));        
        return exprAble.add(v1, v2);
    }

    @Override
    public Values visitDivExpr(ExprParser.DivExprContext ctx) {        
        Values v1 = this.visit(ctx.expr(0));
        Values v2 = this.visit(ctx.expr(1));        
        return exprAble.div(v1, v2);
    }

    @Override
    public Values visitPowExpr(ExprParser.PowExprContext ctx) {
        return super.visitPowExpr(ctx); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Values visitMinusExpr(ExprParser.MinusExprContext ctx) {        
        Values v1 = this.visit(ctx.expr(0));
        Values v2 = this.visit(ctx.expr(1));        
        return exprAble.minus(v1, v2);
    }

    @Override
    public Values visitMultExpr(ExprParser.MultExprContext ctx) {       
        Values v1 = this.visit(ctx.expr(0));
        Values v2 = this.visit(ctx.expr(1));        
        return exprAble.mult(v1, v2);
    }
    
    @Override
    public Values visitAtomExpr(ExprParser.AtomExprContext ctx) {
        return new Values(Double.valueOf(ctx.getText()));
    }

    public void resetOutCome() {
        outcome = null;
    }

    public Double getOutcome() {
        return outcome;
    }
    
}
